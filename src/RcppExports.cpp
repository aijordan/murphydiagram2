// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// C_dominates_expect
bool C_dominates_expect(const List& x, const List& y, const double tol);
RcppExport SEXP _murphydiagram2_C_dominates_expect(SEXP xSEXP, SEXP ySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(C_dominates_expect(x, y, tol));
    return rcpp_result_gen;
END_RCPP
}
// C_dominates_quant
bool C_dominates_quant(const List& x, const List& y, const double tol);
RcppExport SEXP _murphydiagram2_C_dominates_quant(SEXP xSEXP, SEXP ySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(C_dominates_quant(x, y, tol));
    return rcpp_result_gen;
END_RCPP
}
// C_md_expect
List C_md_expect(const NumericVector& x, const NumericVector& y, const double& level, const IntegerVector& ordery);
RcppExport SEXP _murphydiagram2_C_md_expect(SEXP xSEXP, SEXP ySEXP, SEXP levelSEXP, SEXP orderySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type level(levelSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ordery(orderySEXP);
    rcpp_result_gen = Rcpp::wrap(C_md_expect(x, y, level, ordery));
    return rcpp_result_gen;
END_RCPP
}
// C_md_quant
List C_md_quant(const NumericVector& x, const NumericVector& y, const double& level, const IntegerVector& ordery);
RcppExport SEXP _murphydiagram2_C_md_quant(SEXP xSEXP, SEXP ySEXP, SEXP levelSEXP, SEXP orderySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type level(levelSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ordery(orderySEXP);
    rcpp_result_gen = Rcpp::wrap(C_md_quant(x, y, level, ordery));
    return rcpp_result_gen;
END_RCPP
}
// C_thin_by
std::vector<int> C_thin_by(const NumericVector& x, const NumericVector& y, const double& xtol, const double& ytol);
RcppExport SEXP _murphydiagram2_C_thin_by(SEXP xSEXP, SEXP ySEXP, SEXP xtolSEXP, SEXP ytolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type xtol(xtolSEXP);
    Rcpp::traits::input_parameter< const double& >::type ytol(ytolSEXP);
    rcpp_result_gen = Rcpp::wrap(C_thin_by(x, y, xtol, ytol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_murphydiagram2_C_dominates_expect", (DL_FUNC) &_murphydiagram2_C_dominates_expect, 3},
    {"_murphydiagram2_C_dominates_quant", (DL_FUNC) &_murphydiagram2_C_dominates_quant, 3},
    {"_murphydiagram2_C_md_expect", (DL_FUNC) &_murphydiagram2_C_md_expect, 4},
    {"_murphydiagram2_C_md_quant", (DL_FUNC) &_murphydiagram2_C_md_quant, 4},
    {"_murphydiagram2_C_thin_by", (DL_FUNC) &_murphydiagram2_C_thin_by, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_murphydiagram2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
